//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Aidan/scripts/CookingInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CookingInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CookingInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CookingInput"",
    ""maps"": [
        {
            ""name"": ""Cooking"",
            ""id"": ""ca5b9cee-a799-43e6-8f8e-d8053ce014c0"",
            ""actions"": [
                {
                    ""name"": ""leftClick"",
                    ""type"": ""Button"",
                    ""id"": ""1f0f7996-fbbd-40ef-8e18-7ed27f7610c2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePositon"",
                    ""type"": ""Value"",
                    ""id"": ""3751b8e9-858c-4d01-8af7-16e0338a08da"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6b07e873-b350-45c3-87fc-61e35b27b3c4"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""leftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8bb0b0e1-77a4-4264-ba44-9756b7339feb"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePositon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Cooking
        m_Cooking = asset.FindActionMap("Cooking", throwIfNotFound: true);
        m_Cooking_leftClick = m_Cooking.FindAction("leftClick", throwIfNotFound: true);
        m_Cooking_MousePositon = m_Cooking.FindAction("MousePositon", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Cooking
    private readonly InputActionMap m_Cooking;
    private ICookingActions m_CookingActionsCallbackInterface;
    private readonly InputAction m_Cooking_leftClick;
    private readonly InputAction m_Cooking_MousePositon;
    public struct CookingActions
    {
        private @CookingInput m_Wrapper;
        public CookingActions(@CookingInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @leftClick => m_Wrapper.m_Cooking_leftClick;
        public InputAction @MousePositon => m_Wrapper.m_Cooking_MousePositon;
        public InputActionMap Get() { return m_Wrapper.m_Cooking; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CookingActions set) { return set.Get(); }
        public void SetCallbacks(ICookingActions instance)
        {
            if (m_Wrapper.m_CookingActionsCallbackInterface != null)
            {
                @leftClick.started -= m_Wrapper.m_CookingActionsCallbackInterface.OnLeftClick;
                @leftClick.performed -= m_Wrapper.m_CookingActionsCallbackInterface.OnLeftClick;
                @leftClick.canceled -= m_Wrapper.m_CookingActionsCallbackInterface.OnLeftClick;
                @MousePositon.started -= m_Wrapper.m_CookingActionsCallbackInterface.OnMousePositon;
                @MousePositon.performed -= m_Wrapper.m_CookingActionsCallbackInterface.OnMousePositon;
                @MousePositon.canceled -= m_Wrapper.m_CookingActionsCallbackInterface.OnMousePositon;
            }
            m_Wrapper.m_CookingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @leftClick.started += instance.OnLeftClick;
                @leftClick.performed += instance.OnLeftClick;
                @leftClick.canceled += instance.OnLeftClick;
                @MousePositon.started += instance.OnMousePositon;
                @MousePositon.performed += instance.OnMousePositon;
                @MousePositon.canceled += instance.OnMousePositon;
            }
        }
    }
    public CookingActions @Cooking => new CookingActions(this);
    public interface ICookingActions
    {
        void OnLeftClick(InputAction.CallbackContext context);
        void OnMousePositon(InputAction.CallbackContext context);
    }
}
